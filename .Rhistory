addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
popouttext <- c("danger1")
df33 <- data.frame(name = c("B", "F", "Rock"),
pop = sqrt(c(600000, 50000, 1e6))*input$bins,
lat = c(39.292, 39.414, 39.084),
lng = c(-76.607, -77.420, -77.153))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red", fillOpacity = 0.5) %>%
# addMarkers(icon = myicon, popup = popouttext, clusterOptions = markerClusterOptions()) %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
shiny::runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
animationOptions(interval = 1000, loop = FALSE, playButton = NULL,
pauseButton = NULL),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1000, loop = FALSE, playButton = NULL,
pauseButton = NULL),
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
interval = 1000
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
interval = 1000
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1000)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T, animationOptions(interval = 1, loop = FALSE, playButton = NULL,
pauseButton = NULL)
),
plotOutput("distPlot")
)
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T, animationOptions(interval = 1, loop = FALSE, playButton = NULL,
pauseButton = NULL)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 50,
animate = T
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 1,
animate=animationOptions(interval=300, loop=T)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 1,
animate=animationOptions(interval=300, loop=T)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), ylim = c(0,100))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
shiny::runApp('C:/Users/User/Desktop/population_map/Map_ScalingRadius')
library(zoom)
#input parameters
sim.x<-200000
cmp<-2.71
initfcf<-72
g<-0.0380446126373635
gvolaty<-0.222637077528689
perpg<-0.0380446126373635
dis<-0.126821094434842
trxcost<-.015
nc<-324.2
sh<-221.393
rd<-2
ci<-.9
stockname<-"FAVCO"
fcf3<-1/4*initfcf*(1+g)^(1-3/12)
fcf6<-1/4*initfcf*(1+g)^(1-6/12)
fcf9<-1/4*initfcf*(1+g)^(1-9/12)
fcf12<-1/4*initfcf*(1+g)^(1-12/12)
fcf<-sum(fcf3,fcf6,fcf9,fcf12)
#calculate intrinsic value
fcf<-as.vector(rep(fcf,sim.x))
table<-data.frame(fcf=fcf,npv=0,final_npv=0)
rand.g<-data.frame(rand=rnorm(sim.x,mean=g,sd=gvolaty))
for(i in 1:101){
if(i==1){
npv<-0
table$fcf<-table$fcf*(1+rand.g[,1])
table$npv<-table$npv+(table$fcf/((1+dis)^i))/sh
}
else{
rand.g<-data.frame(rand=rnorm(sim.x,mean=g,sd=gvolaty))
table$fcf<-table$fcf*(1+rand.g[,1])
table$npv<-table$npv+(table$fcf/((1+dis)^i))/sh
}
}
table$npv<-(table$npv+(table$fcf*(1+perpg)/(dis-perpg))/((1+dis)^101)+nc/sh)/(1+trxcost)
table$final_npv<-round(table$npv,digits=rd)
max.likelihood <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#analysis of simulated outcomes
intr.val<-max.likelihood(table$final_npv)
quantile(table$final_npv,probs=ci)
final<-table[table$final_npv<=quantile(table$final_npv,probs=ci),]
final$npv_grp<-cut(final$final_npv,
breaks=(round((max(final$final_npv)-min(final$final_npv))/(cmp*.05),digits=0)),
ordered_result=TRUE)
prob.rr<-quantile(final[final$final_npv<=intr.val,3],probs=.5)
win.rate<-1-length(which(table$final_npv<=cmp))/sim.x
#plot histogram
hist<-hist(final$final_npv,
breaks=(round((max(final$final_npv)-min(final$final_npv))/(cmp*.05),digits=0)),
plot=FALSE)
hist$counts=hist$counts/sim.x*100
labs<-paste(round(hist$count,digits=1),"%",sep="")
plot(hist,col="gray",labels=labs,main=paste("Intrinsic value simulation of",stockname,"(n=",format(sim.x,scientific=FALSE),",",ci*100,"% lower tail CI)"),
xlab="Stock value",ylab="Probability of occurence (%)",
ylim=c(0,1.08*max(hist$counts)))
abline(v=intr.val,col="green",lwd=2)
#text(x=intr.val,max(hist$counts),paste("Max likelihood",intr.val),srt=90)
abline(v=cmp,col="blue",lwd=2)
text(x=cmp,max(hist$counts),paste("Win chance",round(win.rate*100,digits=1),"%"))
abline(v=prob.rr,col="orange",lwd=2)
#text(x=prob.rr,max(hist$counts),paste("RR neutral",prob.rr),srt=90)
abline(v=min(final$final_npv),col="red",lwd=2)
#text(x=min(final$final_npv),max(hist$counts),paste("Min value",min(final$final_npv)),srt=90)
abline(v=max(final$final_npv),col="gold",lwd=2)
#text(x=max(final$final_npv),max(hist$counts),paste("Max value",max(final$final_npv)),srt=90)
legend("topright",
c(paste("CMP =",cmp),
paste("Min value =",min(final$final_npv),"(",round((min(final$final_npv)/cmp-1)*100,digits=0),"%)"),
paste("RR neutral =",prob.rr,"(",round((prob.rr/cmp-1)*100,digits=0),"%)"),
paste("Max likelihood =",intr.val,"(",round((intr.val/cmp-1)*100,digits=0),"%)"),
paste(ci*100,"% CI value =",max(final$final_npv),"(",round((max(final$final_npv)/cmp-1)*100,digits=0),"%)")),
lty=1,
lwd=2,
col=c("blue","red","orange","green","gold"),
bty="n",
cex=.55)
zm()
#critical points
paste(labels=cat("Intrinsic value ",intr.val,
"\nProbability adjusted risk reward ",prob.rr,
"\nMinimum value",min(final$final_npv),"\n"))
install.packages("zoom")
library(zoom)
zm()
table
str(table)
fcf
str(table)
intr.val
final_npv
summary(table$final_npv)
mode(table$final_npv)
modal(table$final_npv)
stats::mode(table$final_npv)
intr.val
quantile(table$final_npv,probs=ci)
final<-table[table$final_npv<=quantile(table$final_npv,probs=ci),]
final$npv_grp<-cut(final$final_npv,
breaks=(round((max(final$final_npv)-min(final$final_npv))/(cmp*.05),digits=0)),
ordered_result=TRUE)
prob.rr<-quantile(final[final$final_npv<=intr.val,3],probs=.5)
win.rate<-1-length(which(table$final_npv<=cmp))/sim.x
win.rate
prob.rr
hist<-hist(final$final_npv,
breaks=(round((max(final$final_npv)-min(final$final_npv))/(cmp*.05),digits=0)),
plot=FALSE)
#critical points
paste(labels=cat("Intrinsic value ",intr.val,
"\nProbability adjusted risk reward ",prob.rr,
"\nMinimum value",min(final$final_npv),"\n"))
sapply(c("hi", "bye", "no"), FUN = function(x,i){
print(x)
print(i)
}
)
library(reshape2)
library(ggplot2)
setwd("C:/Users/User/git/sir/cpp")
df <- read.csv("data_sir_deterministic.csv")
df2 <- melt(df, id.vars = "time")
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
setwd("C:/Users/User/git/sir_cplusplus")
df <- read.csv("data_sir_stochastic.csv")
df2 <- melt(df, id.vars = "time")
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
df <- read.csv("data_sir_immi_emi.csv")
df2 <- melt(df, id.vars = "time")
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
